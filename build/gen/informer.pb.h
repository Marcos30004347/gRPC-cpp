// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: informer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_informer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_informer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_informer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_informer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_informer_2eproto;
class GetDescriptionRep;
class GetDescriptionRepDefaultTypeInternal;
extern GetDescriptionRepDefaultTypeInternal _GetDescriptionRep_default_instance_;
class GetDescriptionReq;
class GetDescriptionReqDefaultTypeInternal;
extern GetDescriptionReqDefaultTypeInternal _GetDescriptionReq_default_instance_;
class GetPortRep;
class GetPortRepDefaultTypeInternal;
extern GetPortRepDefaultTypeInternal _GetPortRep_default_instance_;
class GetPortReq;
class GetPortReqDefaultTypeInternal;
extern GetPortReqDefaultTypeInternal _GetPortReq_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::GetDescriptionRep* Arena::CreateMaybeMessage<::GetDescriptionRep>(Arena*);
template<> ::GetDescriptionReq* Arena::CreateMaybeMessage<::GetDescriptionReq>(Arena*);
template<> ::GetPortRep* Arena::CreateMaybeMessage<::GetPortRep>(Arena*);
template<> ::GetPortReq* Arena::CreateMaybeMessage<::GetPortReq>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class GetPortReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPortReq) */ {
 public:
  inline GetPortReq() : GetPortReq(nullptr) {}
  virtual ~GetPortReq();

  GetPortReq(const GetPortReq& from);
  GetPortReq(GetPortReq&& from) noexcept
    : GetPortReq() {
    *this = ::std::move(from);
  }

  inline GetPortReq& operator=(const GetPortReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPortReq& operator=(GetPortReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPortReq& default_instance();

  static inline const GetPortReq* internal_default_instance() {
    return reinterpret_cast<const GetPortReq*>(
               &_GetPortReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetPortReq& a, GetPortReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPortReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPortReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPortReq* New() const final {
    return CreateMaybeMessage<GetPortReq>(nullptr);
  }

  GetPortReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPortReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPortReq& from);
  void MergeFrom(const GetPortReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPortReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPortReq";
  }
  protected:
  explicit GetPortReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_informer_2eproto);
    return ::descriptor_table_informer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  void set_service(const std::string& value);
  void set_service(std::string&& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  std::string* mutable_service();
  std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // @@protoc_insertion_point(class_scope:GetPortReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_informer_2eproto;
};
// -------------------------------------------------------------------

class GetPortRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetPortRep) */ {
 public:
  inline GetPortRep() : GetPortRep(nullptr) {}
  virtual ~GetPortRep();

  GetPortRep(const GetPortRep& from);
  GetPortRep(GetPortRep&& from) noexcept
    : GetPortRep() {
    *this = ::std::move(from);
  }

  inline GetPortRep& operator=(const GetPortRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPortRep& operator=(GetPortRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPortRep& default_instance();

  static inline const GetPortRep* internal_default_instance() {
    return reinterpret_cast<const GetPortRep*>(
               &_GetPortRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetPortRep& a, GetPortRep& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPortRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPortRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPortRep* New() const final {
    return CreateMaybeMessage<GetPortRep>(nullptr);
  }

  GetPortRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPortRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPortRep& from);
  void MergeFrom(const GetPortRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPortRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetPortRep";
  }
  protected:
  explicit GetPortRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_informer_2eproto);
    return ::descriptor_table_informer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 1,
  };
  // int32 port = 1;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GetPortRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_informer_2eproto;
};
// -------------------------------------------------------------------

class GetDescriptionReq PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetDescriptionReq) */ {
 public:
  inline GetDescriptionReq() : GetDescriptionReq(nullptr) {}
  virtual ~GetDescriptionReq();

  GetDescriptionReq(const GetDescriptionReq& from);
  GetDescriptionReq(GetDescriptionReq&& from) noexcept
    : GetDescriptionReq() {
    *this = ::std::move(from);
  }

  inline GetDescriptionReq& operator=(const GetDescriptionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDescriptionReq& operator=(GetDescriptionReq&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDescriptionReq& default_instance();

  static inline const GetDescriptionReq* internal_default_instance() {
    return reinterpret_cast<const GetDescriptionReq*>(
               &_GetDescriptionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetDescriptionReq& a, GetDescriptionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDescriptionReq* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDescriptionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDescriptionReq* New() const final {
    return CreateMaybeMessage<GetDescriptionReq>(nullptr);
  }

  GetDescriptionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDescriptionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDescriptionReq& from);
  void MergeFrom(const GetDescriptionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDescriptionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetDescriptionReq";
  }
  protected:
  explicit GetDescriptionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_informer_2eproto);
    return ::descriptor_table_informer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceFieldNumber = 1,
  };
  // string service = 1;
  void clear_service();
  const std::string& service() const;
  void set_service(const std::string& value);
  void set_service(std::string&& value);
  void set_service(const char* value);
  void set_service(const char* value, size_t size);
  std::string* mutable_service();
  std::string* release_service();
  void set_allocated_service(std::string* service);
  private:
  const std::string& _internal_service() const;
  void _internal_set_service(const std::string& value);
  std::string* _internal_mutable_service();
  public:

  // @@protoc_insertion_point(class_scope:GetDescriptionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_informer_2eproto;
};
// -------------------------------------------------------------------

class GetDescriptionRep PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetDescriptionRep) */ {
 public:
  inline GetDescriptionRep() : GetDescriptionRep(nullptr) {}
  virtual ~GetDescriptionRep();

  GetDescriptionRep(const GetDescriptionRep& from);
  GetDescriptionRep(GetDescriptionRep&& from) noexcept
    : GetDescriptionRep() {
    *this = ::std::move(from);
  }

  inline GetDescriptionRep& operator=(const GetDescriptionRep& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDescriptionRep& operator=(GetDescriptionRep&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDescriptionRep& default_instance();

  static inline const GetDescriptionRep* internal_default_instance() {
    return reinterpret_cast<const GetDescriptionRep*>(
               &_GetDescriptionRep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetDescriptionRep& a, GetDescriptionRep& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDescriptionRep* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDescriptionRep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDescriptionRep* New() const final {
    return CreateMaybeMessage<GetDescriptionRep>(nullptr);
  }

  GetDescriptionRep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDescriptionRep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDescriptionRep& from);
  void MergeFrom(const GetDescriptionRep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDescriptionRep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetDescriptionRep";
  }
  protected:
  explicit GetDescriptionRep(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_informer_2eproto);
    return ::descriptor_table_informer_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPortAndProtocolFieldNumber = 2,
    kAliasesFieldNumber = 3,
    kCommentsFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string port_and_protocol = 2;
  void clear_port_and_protocol();
  const std::string& port_and_protocol() const;
  void set_port_and_protocol(const std::string& value);
  void set_port_and_protocol(std::string&& value);
  void set_port_and_protocol(const char* value);
  void set_port_and_protocol(const char* value, size_t size);
  std::string* mutable_port_and_protocol();
  std::string* release_port_and_protocol();
  void set_allocated_port_and_protocol(std::string* port_and_protocol);
  private:
  const std::string& _internal_port_and_protocol() const;
  void _internal_set_port_and_protocol(const std::string& value);
  std::string* _internal_mutable_port_and_protocol();
  public:

  // string aliases = 3;
  void clear_aliases();
  const std::string& aliases() const;
  void set_aliases(const std::string& value);
  void set_aliases(std::string&& value);
  void set_aliases(const char* value);
  void set_aliases(const char* value, size_t size);
  std::string* mutable_aliases();
  std::string* release_aliases();
  void set_allocated_aliases(std::string* aliases);
  private:
  const std::string& _internal_aliases() const;
  void _internal_set_aliases(const std::string& value);
  std::string* _internal_mutable_aliases();
  public:

  // string comments = 4;
  void clear_comments();
  const std::string& comments() const;
  void set_comments(const std::string& value);
  void set_comments(std::string&& value);
  void set_comments(const char* value);
  void set_comments(const char* value, size_t size);
  std::string* mutable_comments();
  std::string* release_comments();
  void set_allocated_comments(std::string* comments);
  private:
  const std::string& _internal_comments() const;
  void _internal_set_comments(const std::string& value);
  std::string* _internal_mutable_comments();
  public:

  // @@protoc_insertion_point(class_scope:GetDescriptionRep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_and_protocol_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aliases_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr comments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_informer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetPortReq

// string service = 1;
inline void GetPortReq::clear_service() {
  service_.ClearToEmpty();
}
inline const std::string& GetPortReq::service() const {
  // @@protoc_insertion_point(field_get:GetPortReq.service)
  return _internal_service();
}
inline void GetPortReq::set_service(const std::string& value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:GetPortReq.service)
}
inline std::string* GetPortReq::mutable_service() {
  // @@protoc_insertion_point(field_mutable:GetPortReq.service)
  return _internal_mutable_service();
}
inline const std::string& GetPortReq::_internal_service() const {
  return service_.Get();
}
inline void GetPortReq::_internal_set_service(const std::string& value) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetPortReq::set_service(std::string&& value) {
  
  service_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetPortReq.service)
}
inline void GetPortReq::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GetPortReq.service)
}
inline void GetPortReq::set_service(const char* value,
    size_t size) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetPortReq.service)
}
inline std::string* GetPortReq::_internal_mutable_service() {
  
  return service_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetPortReq::release_service() {
  // @@protoc_insertion_point(field_release:GetPortReq.service)
  return service_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPortReq::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetPortReq.service)
}

// -------------------------------------------------------------------

// GetPortRep

// int32 port = 1;
inline void GetPortRep::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPortRep::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPortRep::port() const {
  // @@protoc_insertion_point(field_get:GetPortRep.port)
  return _internal_port();
}
inline void GetPortRep::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void GetPortRep::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GetPortRep.port)
}

// -------------------------------------------------------------------

// GetDescriptionReq

// string service = 1;
inline void GetDescriptionReq::clear_service() {
  service_.ClearToEmpty();
}
inline const std::string& GetDescriptionReq::service() const {
  // @@protoc_insertion_point(field_get:GetDescriptionReq.service)
  return _internal_service();
}
inline void GetDescriptionReq::set_service(const std::string& value) {
  _internal_set_service(value);
  // @@protoc_insertion_point(field_set:GetDescriptionReq.service)
}
inline std::string* GetDescriptionReq::mutable_service() {
  // @@protoc_insertion_point(field_mutable:GetDescriptionReq.service)
  return _internal_mutable_service();
}
inline const std::string& GetDescriptionReq::_internal_service() const {
  return service_.Get();
}
inline void GetDescriptionReq::_internal_set_service(const std::string& value) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDescriptionReq::set_service(std::string&& value) {
  
  service_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetDescriptionReq.service)
}
inline void GetDescriptionReq::set_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GetDescriptionReq.service)
}
inline void GetDescriptionReq::set_service(const char* value,
    size_t size) {
  
  service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetDescriptionReq.service)
}
inline std::string* GetDescriptionReq::_internal_mutable_service() {
  
  return service_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDescriptionReq::release_service() {
  // @@protoc_insertion_point(field_release:GetDescriptionReq.service)
  return service_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDescriptionReq::set_allocated_service(std::string* service) {
  if (service != nullptr) {
    
  } else {
    
  }
  service_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetDescriptionReq.service)
}

// -------------------------------------------------------------------

// GetDescriptionRep

// string name = 1;
inline void GetDescriptionRep::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetDescriptionRep::name() const {
  // @@protoc_insertion_point(field_get:GetDescriptionRep.name)
  return _internal_name();
}
inline void GetDescriptionRep::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:GetDescriptionRep.name)
}
inline std::string* GetDescriptionRep::mutable_name() {
  // @@protoc_insertion_point(field_mutable:GetDescriptionRep.name)
  return _internal_mutable_name();
}
inline const std::string& GetDescriptionRep::_internal_name() const {
  return name_.Get();
}
inline void GetDescriptionRep::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDescriptionRep::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetDescriptionRep.name)
}
inline void GetDescriptionRep::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GetDescriptionRep.name)
}
inline void GetDescriptionRep::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetDescriptionRep.name)
}
inline std::string* GetDescriptionRep::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDescriptionRep::release_name() {
  // @@protoc_insertion_point(field_release:GetDescriptionRep.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDescriptionRep::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetDescriptionRep.name)
}

// string port_and_protocol = 2;
inline void GetDescriptionRep::clear_port_and_protocol() {
  port_and_protocol_.ClearToEmpty();
}
inline const std::string& GetDescriptionRep::port_and_protocol() const {
  // @@protoc_insertion_point(field_get:GetDescriptionRep.port_and_protocol)
  return _internal_port_and_protocol();
}
inline void GetDescriptionRep::set_port_and_protocol(const std::string& value) {
  _internal_set_port_and_protocol(value);
  // @@protoc_insertion_point(field_set:GetDescriptionRep.port_and_protocol)
}
inline std::string* GetDescriptionRep::mutable_port_and_protocol() {
  // @@protoc_insertion_point(field_mutable:GetDescriptionRep.port_and_protocol)
  return _internal_mutable_port_and_protocol();
}
inline const std::string& GetDescriptionRep::_internal_port_and_protocol() const {
  return port_and_protocol_.Get();
}
inline void GetDescriptionRep::_internal_set_port_and_protocol(const std::string& value) {
  
  port_and_protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDescriptionRep::set_port_and_protocol(std::string&& value) {
  
  port_and_protocol_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetDescriptionRep.port_and_protocol)
}
inline void GetDescriptionRep::set_port_and_protocol(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_and_protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GetDescriptionRep.port_and_protocol)
}
inline void GetDescriptionRep::set_port_and_protocol(const char* value,
    size_t size) {
  
  port_and_protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetDescriptionRep.port_and_protocol)
}
inline std::string* GetDescriptionRep::_internal_mutable_port_and_protocol() {
  
  return port_and_protocol_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDescriptionRep::release_port_and_protocol() {
  // @@protoc_insertion_point(field_release:GetDescriptionRep.port_and_protocol)
  return port_and_protocol_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDescriptionRep::set_allocated_port_and_protocol(std::string* port_and_protocol) {
  if (port_and_protocol != nullptr) {
    
  } else {
    
  }
  port_and_protocol_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port_and_protocol,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetDescriptionRep.port_and_protocol)
}

// string aliases = 3;
inline void GetDescriptionRep::clear_aliases() {
  aliases_.ClearToEmpty();
}
inline const std::string& GetDescriptionRep::aliases() const {
  // @@protoc_insertion_point(field_get:GetDescriptionRep.aliases)
  return _internal_aliases();
}
inline void GetDescriptionRep::set_aliases(const std::string& value) {
  _internal_set_aliases(value);
  // @@protoc_insertion_point(field_set:GetDescriptionRep.aliases)
}
inline std::string* GetDescriptionRep::mutable_aliases() {
  // @@protoc_insertion_point(field_mutable:GetDescriptionRep.aliases)
  return _internal_mutable_aliases();
}
inline const std::string& GetDescriptionRep::_internal_aliases() const {
  return aliases_.Get();
}
inline void GetDescriptionRep::_internal_set_aliases(const std::string& value) {
  
  aliases_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDescriptionRep::set_aliases(std::string&& value) {
  
  aliases_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetDescriptionRep.aliases)
}
inline void GetDescriptionRep::set_aliases(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  aliases_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GetDescriptionRep.aliases)
}
inline void GetDescriptionRep::set_aliases(const char* value,
    size_t size) {
  
  aliases_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetDescriptionRep.aliases)
}
inline std::string* GetDescriptionRep::_internal_mutable_aliases() {
  
  return aliases_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDescriptionRep::release_aliases() {
  // @@protoc_insertion_point(field_release:GetDescriptionRep.aliases)
  return aliases_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDescriptionRep::set_allocated_aliases(std::string* aliases) {
  if (aliases != nullptr) {
    
  } else {
    
  }
  aliases_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aliases,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetDescriptionRep.aliases)
}

// string comments = 4;
inline void GetDescriptionRep::clear_comments() {
  comments_.ClearToEmpty();
}
inline const std::string& GetDescriptionRep::comments() const {
  // @@protoc_insertion_point(field_get:GetDescriptionRep.comments)
  return _internal_comments();
}
inline void GetDescriptionRep::set_comments(const std::string& value) {
  _internal_set_comments(value);
  // @@protoc_insertion_point(field_set:GetDescriptionRep.comments)
}
inline std::string* GetDescriptionRep::mutable_comments() {
  // @@protoc_insertion_point(field_mutable:GetDescriptionRep.comments)
  return _internal_mutable_comments();
}
inline const std::string& GetDescriptionRep::_internal_comments() const {
  return comments_.Get();
}
inline void GetDescriptionRep::_internal_set_comments(const std::string& value) {
  
  comments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetDescriptionRep::set_comments(std::string&& value) {
  
  comments_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GetDescriptionRep.comments)
}
inline void GetDescriptionRep::set_comments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  comments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:GetDescriptionRep.comments)
}
inline void GetDescriptionRep::set_comments(const char* value,
    size_t size) {
  
  comments_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GetDescriptionRep.comments)
}
inline std::string* GetDescriptionRep::_internal_mutable_comments() {
  
  return comments_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetDescriptionRep::release_comments() {
  // @@protoc_insertion_point(field_release:GetDescriptionRep.comments)
  return comments_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDescriptionRep::set_allocated_comments(std::string* comments) {
  if (comments != nullptr) {
    
  } else {
    
  }
  comments_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), comments,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GetDescriptionRep.comments)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_informer_2eproto
