// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: informer.proto

#include "informer.pb.h"
#include "informer.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Informer_method_names[] = {
  "/Informer/GetPort",
  "/Informer/GetDescription",
};

std::unique_ptr< Informer::Stub> Informer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Informer::Stub> stub(new Informer::Stub(channel));
  return stub;
}

Informer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetPort_(Informer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDescription_(Informer_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Informer::Stub::GetPort(::grpc::ClientContext* context, const ::GetPortReq& request, ::GetPortRep* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetPortReq, ::GetPortRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPort_, context, request, response);
}

void Informer::Stub::experimental_async::GetPort(::grpc::ClientContext* context, const ::GetPortReq* request, ::GetPortRep* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetPortReq, ::GetPortRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPort_, context, request, response, std::move(f));
}

void Informer::Stub::experimental_async::GetPort(::grpc::ClientContext* context, const ::GetPortReq* request, ::GetPortRep* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPort_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetPortRep>* Informer::Stub::PrepareAsyncGetPortRaw(::grpc::ClientContext* context, const ::GetPortReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetPortRep, ::GetPortReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPort_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetPortRep>* Informer::Stub::AsyncGetPortRaw(::grpc::ClientContext* context, const ::GetPortReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPortRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Informer::Stub::GetDescription(::grpc::ClientContext* context, const ::GetDescriptionReq& request, ::GetDescriptionRep* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetDescriptionReq, ::GetDescriptionRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDescription_, context, request, response);
}

void Informer::Stub::experimental_async::GetDescription(::grpc::ClientContext* context, const ::GetDescriptionReq* request, ::GetDescriptionRep* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetDescriptionReq, ::GetDescriptionRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDescription_, context, request, response, std::move(f));
}

void Informer::Stub::experimental_async::GetDescription(::grpc::ClientContext* context, const ::GetDescriptionReq* request, ::GetDescriptionRep* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDescription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GetDescriptionRep>* Informer::Stub::PrepareAsyncGetDescriptionRaw(::grpc::ClientContext* context, const ::GetDescriptionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::GetDescriptionRep, ::GetDescriptionReq, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDescription_, context, request);
}

::grpc::ClientAsyncResponseReader< ::GetDescriptionRep>* Informer::Stub::AsyncGetDescriptionRaw(::grpc::ClientContext* context, const ::GetDescriptionReq& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDescriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

Informer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Informer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Informer::Service, ::GetPortReq, ::GetPortRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Informer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetPortReq* req,
             ::GetPortRep* resp) {
               return service->GetPort(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Informer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Informer::Service, ::GetDescriptionReq, ::GetDescriptionRep, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Informer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetDescriptionReq* req,
             ::GetDescriptionRep* resp) {
               return service->GetDescription(ctx, req, resp);
             }, this)));
}

Informer::Service::~Service() {
}

::grpc::Status Informer::Service::GetPort(::grpc::ServerContext* context, const ::GetPortReq* request, ::GetPortRep* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Informer::Service::GetDescription(::grpc::ServerContext* context, const ::GetDescriptionReq* request, ::GetDescriptionRep* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


